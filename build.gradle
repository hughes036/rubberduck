plugins {
    id 'java'
    id 'application'
}

application {
    mainClass = 'Main'
    applicationName = 'rubberduck'
}

group = 'com.rubberduck'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    
    // Google GenAI for Gemini integration
    implementation 'com.google.genai:google-genai:1.0.0'
    
    // Jackson for JSON parsing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
}

test {
    useJUnitPlatform()
}

// Custom task to run Gemini Hello World example
task runGemini(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'gemini.GeminiHelloWorld'
    
    // Pass through environment variables
    environment System.getenv()
}


// Configure the run task to set environment variables from apikeys.json
run {
    // Pass through all existing environment variables
    environment System.getenv()
    
    // Try to load API key from apikeys.json and set environment variable
    doFirst {
        def apikeysFile = new File(projectDir, 'apikeys.json')
        if (apikeysFile.exists()) {
            try {
                def json = new groovy.json.JsonSlurper().parseText(apikeysFile.text)
                if (json.gemini && !json.gemini.toString().trim().isEmpty()) {
                    environment 'GOOGLE_API_KEY', json.gemini
                    println "✓ Loaded Gemini API key from apikeys.json"
                }
            } catch (Exception e) {
                println "Warning: Could not parse apikeys.json: ${e.message}"
            }
        }
        
        // Also check for legacy apikey.txt
        def legacyApiKeyFile = new File(projectDir, 'apikey.txt')
        if (legacyApiKeyFile.exists() && !environment.containsKey('GOOGLE_API_KEY')) {
            try {
                def apiKey = legacyApiKeyFile.text.trim()
                if (!apiKey.isEmpty()) {
                    environment 'GOOGLE_API_KEY', apiKey
                    println "✓ Loaded API key from legacy apikey.txt"
                }
            } catch (Exception e) {
                println "Warning: Could not read apikey.txt: ${e.message}"
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
            exclude 'test/**'
        }
    }
    test {
        java {
            srcDirs = ['src/test']
        }
    }
}
