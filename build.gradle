import org.jetbrains.compose.desktop.application.dsl.TargetFormat

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'org.jetbrains.compose' version '1.6.1'
    id 'java'
}

group = "com.rubberduck"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
    maven {
        url "https://maven.pkg.jetbrains.space/public/p/compose/dev"
    }
    google()
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.1")

    // Google GenAI for Gemini integration
    implementation("com.google.genai:google-genai:1.0.0")

    // Jackson for JSON parsing
    implementation("com.fasterxml.jackson.core:jackson-databind:2.15.2")

    // Compose for Desktop
    implementation(compose.desktop.currentOs)
}

test {
    useJUnitPlatform()
}

// Custom task to run Gemini Hello World example
task runGemini(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'gemini.GeminiHelloWorld'
    
    // Pass through environment variables
    environment System.getenv()
}

compose.desktop {
    application {
        mainClass = "MainKt"

        nativeDistributions {
            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)
            packageName = "Rubberduck"
            packageVersion = "1.0.0"
        }

    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
            exclude 'test/**'
        }
        kotlin {
            srcDirs = ['src']
            exclude 'test/**'
        }
    }
    test {
        java {
            srcDirs = ['src/test']
        }
    }
}

tasks.matching { it.name == "run" }.configureEach {
    doFirst {
        def apikeysFile = new File(projectDir, 'apikeys.json')
        if (apikeysFile.exists()) {
            try {
                def json = new groovy.json.JsonSlurper().parseText(apikeysFile.text)
                if (json.gemini && !json.gemini.toString().trim().isEmpty()) {
                    environment 'GOOGLE_API_KEY', json.gemini
                    println "✓ Loaded Gemini API key from apikeys.json"
                }
            } catch (Exception e) {
                println "Warning: Could not parse apikeys.json: ${e.message}"
            }
        }
        
        def legacyApiKeyFile = new File(projectDir, 'apikey.txt')
        if (legacyApiKeyFile.exists() && !environment.containsKey('GOOGLE_API_KEY')) {
            try {
                def apiKey = legacyApiKeyFile.text.trim()
                if (!apiKey.isEmpty()) {
                    environment 'GOOGLE_API_KEY', apiKey
                    println "✓ Loaded API key from legacy apikey.txt"
                }
            } catch (Exception e) {
                println "Warning: Could not read apikey.txt: ${e.message}"
            }
        }
    }
}

compose.desktop {
    application {
        mainClass = "MainKt"

        nativeDistributions {
            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)
            packageName = "Rubberduck"
            packageVersion = "1.0.0"
        }
    }
}
